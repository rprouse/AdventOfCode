using System;
using System.Text;
using System.Collections.Generic;

// ........#########............................
// ........#.......#............................
// ........#.#############......................
// ........#.......#.....#......................
// ........#.......#.....#.......###########....
// ........#.......#.....#.......#.........#....
// ........#.......#.....#.......#.#############
// ........#.......#.....#.......#.#.......#...#
// ........#.......#.....#.......#.#.......#...#
// ........#.......#.....#.......#.#.......#...#
// ^########.....#########.#############...#...#
// ..............#.#.......#.....#.#...#...#...#
// ........#########.....#########.#...#...#...#
// ........#.....#.......#.#.......#...#...#...#
// ........#.....#.......#.#.......#...#...#...#
// ........#.....#.......#.#.......#...#...#...#
// ........#.....#.......#.#.......#########...#
// ........#.....#.......#.#...........#.......#
// ........#.....#.......#.###########.#########
// ........#.....#.......#...........#..........
// ........#############.#...........#..........
// ..............#.....#.#...........#..........
// ..............#########...........#..........
// ....................#.............#..........
// ....................#.............#..........
// ....................#.............#..........
// ....................#.............#########..
// ....................#.....................#..
// ....................###########...........#..
// ..............................#...........#..
// ..............................#...........#..
// ..............................#...........#..
// ..............................#...........#..
// ..............................#...........#..
// ..............................#...........#..
// ..............................#...........#..
// ..............................#############..

namespace AdventOfCode2019
{
    public class AsciiCode : EventDrivenIntcodeComputer
    {
        const char SCAFFOLD = '#';
        const char SPACE = '.';
        const char LOST = 'x';
        const char UP = '^';
        const char DOWN = 'v';
        const char LEFT = '<';
        const char RIGHT = '>';
        const char NEWLINE = (char)10;

        public List<string> Camera { get; } = new List<string>();
        StringBuilder scanLine = new StringBuilder();

        public AsciiCode(long[] program) : base(program)
        {
            InputNeeded += AsciiCode_InputNeeded;
            OutputAvailable += AsciiCode_OutputAvailable;
        }

        public void OutputToConsole()
        {
            foreach(var line in Camera)
            {
                Console.WriteLine(line);
            }
        }

        private void AsciiCode_InputNeeded(object sender, EventArgs e)
        {
            throw new NotImplementedException();
        }

        private void AsciiCode_OutputAvailable(object sender, EventArgs e)
        {
            long c = Output.Dequeue();
            if (c > 127)
            {
                Console.WriteLine($"Collected: {c}");
            }
            else
            {
                Console.Write((char)c);
            }
            if(c == NEWLINE)
            {
                Camera.Add(scanLine.ToString());
                scanLine.Clear();
            }
            else
            {
                scanLine.Append((char)c);
            }
        }
    }
}
